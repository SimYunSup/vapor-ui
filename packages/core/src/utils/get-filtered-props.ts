const domAttrs = new Set([
    'id',
    'type',
    'style',
    'title',
    'role',
    'classID',
    'keyParams',
    'keyType',
    'tabIndex',
    'htmlFor',
    'width',
    'height',
    'abbr',
    'accept',
    'acceptCharset',
    'accessKey',
    'action',
    'allowFullScreen',
    'allowTransparency',
    'alt',
    'async',
    'autoComplete',
    'autoFocus',
    'autoPlay',
    'cellPadding',
    'cellSpacing',
    'challenge',
    'charset',
    'checked',
    'cite',
    'className',
    'cols',
    'colSpan',
    'command',
    'content',
    'contentEditable',
    'contextMenu',
    'controls',
    'coords',
    'crossOrigin',
    'data',
    'dateTime',
    'default',
    'defer',
    'dir',
    'disabled',
    'download',
    'draggable',
    'dropzone',
    'encType',
    'enterKeyHint',
    'form',
    'formAction',
    'formEncType',
    'formMethod',
    'formNoValidate',
    'formTarget',
    'frameBorder',
    'headers',
    'hidden',
    'high',
    'href',
    'hrefLang',
    'httpEquiv',
    'icon',
    'inputMode',
    'isMap',
    'itemId',
    'itemProp',
    'itemRef',
    'itemScope',
    'itemType',
    'kind',
    'label',
    'lang',
    'list',
    'loop',
    'manifest',
    'max',
    'maxLength',
    'media',
    'mediaGroup',
    'method',
    'min',
    'minLength',
    'multiple',
    'muted',
    'name',
    'noValidate',
    'open',
    'optimum',
    'pattern',
    'ping',
    'placeholder',
    'poster',
    'preload',
    'radioGroup',
    'referrerPolicy',
    'readOnly',
    'rel',
    'required',
    'rows',
    'rowSpan',
    'sandbox',
    'scope',
    'scoped',
    'scrolling',
    'seamless',
    'selected',
    'shape',
    'size',
    'sizes',
    'slot',
    'sortable',
    'span',
    'spellCheck',
    'src',
    'srcDoc',
    'srcSet',
    'start',
    'step',
    'target',
    'translate',
    'typeMustMatch',
    'useMap',
    'value',
    'wmode',
    'wrap',
]);

const eventNames = new Set([
    'onCopy',
    'onCut',
    'onPaste',
    'onLoad',
    'onError',
    'onWheel',
    'onScroll',
    'onCompositionEnd',
    'onCompositionStart',
    'onCompositionUpdate',
    'onKeyDown',
    'onKeyPress',
    'onKeyUp',
    'onFocus',
    'onBlur',
    'onChange',
    'onInput',
    'onSubmit',
    'onClick',
    'onContextMenu',
    'onDoubleClick',
    'onDrag',
    'onDragEnd',
    'onDragEnter',
    'onDragExit',
    'onDragLeave',
    'onDragOver',
    'onDragStart',
    'onDrop',
    'onMouseDown',
    'onMouseEnter',
    'onMouseLeave',
    'onMouseMove',
    'onMouseOut',
    'onMouseOver',
    'onMouseUp',
    'onPointerDown',
    'onPointerEnter',
    'onPointerLeave',
    'onPointerUp',
    'onSelect',
    'onTouchCancel',
    'onTouchEnd',
    'onTouchMove',
    'onTouchStart',
    'onAnimationStart',
    'onAnimationEnd',
    'onAnimationIteration',
    'onTransitionEnd',
    'onCanPlay',
    'onCanPlayThrough',
    'onDurationChange',
    'onEmptied',
    'onEncrypted',
    'onEnded',
    'onLoadedData',
    'onLoadedMetadata',
    'onLoadStart',
    'onPlay',
    'onPause',
    'onPlaying',
    'onProgress',
    'onRateChange',
    'onSeeked',
    'onSeeking',
    'onStalled',
    'onSuspend',
    'onTimeUpdate',
    'onVolumeChange',
    'onWaiting',
]);

const ariaRegex = /^(aria-.*)$/;
const dataRegex = /^(data-.*)$/;

export const getFilteredProps = <T extends Record<string, unknown>>(
    props: T,
    opts: { pickProps?: (keyof T)[]; omitProps?: (keyof T)[] } = {},
): Partial<T> => {
    const { pickProps, omitProps } = opts;
    const filteredProps = {};

    Object.keys(props).forEach((prop) => {
        if (omitProps && omitProps.includes(prop)) return;
        if (
            (pickProps && pickProps.includes(prop)) ||
            eventNames.has(prop) ||
            domAttrs.has(prop) ||
            ariaRegex.test(prop) ||
            dataRegex.test(prop)
        ) {
            // @ts-ignore
            filteredProps[prop] = props[prop];
        }
    });

    return filteredProps;
};
